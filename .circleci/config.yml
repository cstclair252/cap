version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-cluster:
    description: Destroy kubernetes cluster  
    steps:
      - run:
          name: Destroy cluster
          when: on_fail
          command: |
            eksctl delete cluster --name cap-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  docker-lint:
    docker:
      - image: cimg/aws:2023.06
    steps:
      - checkout
      - run:
          name: lint dockerfile
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
            cd ~/project/
            sudo hadolint Dockerfile
  

  docker-build-and-push-image:
    docker:
      - image: cimg/aws:2023.06
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build and push Docker image
          command: |
            docker build -t ${DOCKERHUB_USERNAME}/cap .
            docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
            docker push ${DOCKERHUB_USERNAME}/cap

  deploy-infrastructure:
    docker:
      - image: cimg/aws:2023.06
    steps:
      - checkout
      - run: 
          name: install dependencies 
          command: |
            sudo apt-get update && \
            sudo apt-get install -y tar gzip
      
      - run: 
          name: Install-eksctl
          command: |
            ARCH=amd64
            PLATFORM=$(uname -s)_$ARCH

            curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"

            tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz

            sudo mv /tmp/eksctl /usr/local/bin
      
      - run: 
          name: install kubectl 
          command: |
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

#this is going to gather the current site for deletion later if green site passes smoke-test

      - run: 
          name: gather bluesite variable
          command: |
            eksctl get cluster | awk 'NR==2 {print $1}' > ~/project/.circleci/bluesite-cluster.txt
            cat ~/project/.circleci/bluesite-cluster.txt
      
      - persist_to_workspace:
          root: ~/
          paths:
            -  project/.circleci/bluesite-cluster.txt 
      
      - run:
          name: setup kubernetes cluster 
          command: |
            eksctl create cluster --name cap-${CIRCLE_WORKFLOW_ID:0:7} --region=us-west-2
      
      - run: 
          name: kubeconfig saved
          command: |
            eksctl utils write-kubeconfig --cluster=cap-${CIRCLE_WORKFLOW_ID:0:7}
      
      - run: 
          name: verify cluster
          command: |
            eksctl get cluster --name=cap-${CIRCLE_WORKFLOW_ID:0:7} --region=us-west-2

      - run:
          name: verify kubectl connected
          command: |
            kubectl get nodes
            if [[ $(kubectl get nodes | grep -q "active") ]]; then
              echo "kubectl connected"
            else
              echo "kubectl error"
            fi
        
        #- destroy-cluster
  #might need to store this somewhere in here the name of the cluster since i will have to delete it later. or delete the old one. in the verify cluster run command above. 

  
  configure-infrastructure:
      docker:
        - image: cimg/aws:2023.06
      steps:
        - checkout
        - run: 
            name: install dependencies 
            command: |
              sudo apt-get update && \
              sudo apt-get install -y tar gzip
      
        - run: 
            name: Install-eksctl
            command: |
              ARCH=amd64
              PLATFORM=$(uname -s)_$ARCH

              curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"

              tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz

              sudo mv /tmp/eksctl /usr/local/bin
        
        - run: 
            name: install kubectl 
            command: |
                  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                  sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        
        - run: 
            name: kubeconfig saved
            command: |
              eksctl utils write-kubeconfig --cluster=cap-${CIRCLE_WORKFLOW_ID:0:7}
      
        - run: 
            name: verify cluster
            command: |
              eksctl get cluster --name=cap-${CIRCLE_WORKFLOW_ID:0:7} --region=us-west-2
        
        - run: 
            name: install docker image into cluster
            command: |
              kubectl apply -f ~/project/deployment.yml
        
        - run: 
            name: create ELB with external ip for cluster
            command: |
              kubectl apply -f ~/project/ELBCreate.yml

  configure-cloudfront:
      docker:
        - image: cimg/aws:2023.06
      steps:
        - checkout
        - run:
            name: install dependencies 
            command: |
              sudo apt-get update && \
              sudo apt-get install -y tar gzip
        
        - run:
            name: Install kubectl
            command: |
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        
        - run:
            name: Install eksctl
            command: |
              ARCH=amd64
              PLATFORM=$(uname -s)_$ARCH

              curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"

              tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz

              sudo mv /tmp/eksctl /usr/local/bin
        
        - run: 
            name: kubeconfig saved
            command: |
              eksctl utils write-kubeconfig --cluster=cap-${CIRCLE_WORKFLOW_ID:0:7}
      
        - run: 
            name: verify cluster
            command: |
              eksctl get cluster --name=cap-${CIRCLE_WORKFLOW_ID:0:7} --region=us-west-2
        

#              dns_name=$(kubectl get service cap-1cada17 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
#              updated_dns_name=$(echo "$dns_name" | sed 's/.\+\.\(.\+\.\)elb\.amazonaws\.com/us-west-2.elb.amazonaws.com/')
#              export IP="$updated_dns_name"
        - run: 
            name: get EIB External IP and Setup Cloudfront
            command: |
              kubectl get service cap-${CIRCLE_WORKFLOW_ID:0:7} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
              export IP=$(kubectl get service cap-${CIRCLE_WORKFLOW_ID:0:7} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              aws cloudfront create-distribution \
                --origin-domain-name $IP \
                --default-root-object index.html

              echo $IP

#        - run: 
#            name: setup cloudfront distribution
#            command: |
#              aws cloudfront create-distribution \
#                --origin-domain-name aee05b329fc03418388daf4e88f62c61-351425741.us-west-2.elb.amazonaws.com/ \
#                --default-root-object index.html \
#                --enabled \
#                --comment "CloudFront distribution for ELB"

  update-cloudfront:
      environment:
        DomainName: "$(kubectl get service cap-f85715f -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
      docker:
        - image: cimg/aws:2023.06
      steps:
        - checkout
        - run:
            name: Update CloudFront Distribution
            command: |
              cat env.DomainName
              sudo apt install jq
              jq '.Origins.Items[0].DomainName = env.DomainName' distribution-config.json > updated-config.json
              mv updated-config.json distribution-config.json
              ifmatch=$(aws cloudfront get-distribution-config --id E2BYV5ZTTW57XP | jq -r '.ETag')
              echo $ifmatch
              aws cloudfront update-distribution --id E2BYV5ZTTW57XP --if-match $ifmatch --distribution-config file://distribution-config.json

  smoke-test:
      docker:
        - image: cimg/aws:2023.06
      steps:
        - checkout
        - run:
            name: install dependencies 
            command: |
              sudo apt-get update && \
              sudo apt-get install -y tar gzip && \
              sudo apt install -y tar gzip curl unzip
        
        - run:
              name: Wait for cloudformation to deploy before smoke test
              command: sleep 180
        
        - run:
            name: website smoke test.
            command: |
              if curl $(aws cloudfront list-distributions --query 'DistributionList.Items[].DomainName' --output text) | grep "title"
              then
                exit 0
              else
                exit 1
              fi

workflows:
  default:
    jobs:
      
      - update-cloudfront
#      - docker-lint
#      - docker-build-and-push-image:
#          requires: [docker-lint]
#      - deploy-infrastructure:
#          requires: [docker-build-and-push-image]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#      - configure-cloudfront:
#          requires: [configure-infrastructure]
#      - smoke-test:
#          requires: [configure-cloudfront]
#      - update-cloudfront:
#          requires: [smoke-test]

      