version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-cluster:
    description: Destroy kubernetes cluster  
    steps:
      - run:
          name: Destroy cluster
          when: on_fail
          command: |
            eksctl delete cluster --name cap-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  deploy-infrastructure:
    docker:
      - image: cimg/aws:2023.06
    steps:
      - checkout
      - run:
          name: install dependencies 
          command: |
            sudo apt-get update && \
            sudo apt-get install -y tar gzip
      
      - run:
          name: Install eksctl
          command: |
            ARCH=amd64
            PLATFORM=$(uname -s)_$ARCH

            curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"

            tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz

            sudo mv /tmp/eksctl /usr/local/bin
      
      - run: 
          name: install kubectl 
          command: |
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      
      - run:
          name: setup kubernetes cluster 
          command: |
            eksctl create cluster --name cap-${CIRCLE_WORKFLOW_ID:0:7} --region=us-west-2
      
      - run: 
          name: kubeconfig saved
          command: |
            eksctl utils write-kubeconfig --cluster=cap-${CIRCLE_WORKFLOW_ID:0:7}
      
      - run: 
          name: verify cluster
          command: |
            eksctl get cluster --name=cap-${CIRCLE_WORKFLOW_ID:0:7} --region=us-west-2

      - run:
          name: verify kubectl connected
          command: |
            kubectl get nodes
            if [[ $(kubectl get nodes | grep -q "active") ]]; then
              echo "kubectl connected"
            else
              echo "kubectl error"
            fi
        
        #- destroy-cluster
  #might need to store this somewhere in here the name of the cluster since i will have to delete it later. or delete the old one. in the verify cluster run command above. 



  configure-infrastructure:
      docker:
        - image: cimg/aws:2023.06
      steps:
        - checkout
        - run:
            name: install dependencies 
            command: |
              sudo apt-get update && \
              sudo apt-get install -y tar gzip
        
        - run:
            name: Install kubectl
            command: |
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

        - run:
            name: Install eksctl
            command: |
              ARCH=amd64
              PLATFORM=$(uname -s)_$ARCH

              curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"

              tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz

              sudo mv /tmp/eksctl /usr/local/bin
        
        - run: 
            name: kubeconfig saved
            command: |
              eksctl utils write-kubeconfig --cluster=cap-1cada17
      
        - run: 
            name: verify cluster
            command: |
              eksctl get cluster --name=cap-1cada17 --region=us-west-2
        
        - run: 
            name: install docker image into cluster
            command: |
              kubectl apply -f ~/project/deployment.yml
        
        - run: 
            name: create ELB with external ip for cluster
            command: |
              kubectl apply -f ~/project/ELBCreate.yml

  configure-cloudfront:
      docker:
        - image: cimg/aws:2023.06
      steps:
        - checkout
        - run:
            name: install dependencies 
            command: |
              sudo apt-get update && \
              sudo apt-get install -y tar gzip
        
        - run:
            name: Install kubectl
            command: |
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        
        - run:
            name: Install eksctl
            command: |
              ARCH=amd64
              PLATFORM=$(uname -s)_$ARCH

              curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"

              tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz

              sudo mv /tmp/eksctl /usr/local/bin
        
        - run: 
            name: kubeconfig saved
            command: |
              eksctl utils write-kubeconfig --cluster=cap-1cada17
      
        - run: 
            name: verify cluster
            command: |
              eksctl get cluster --name=cap-1cada17 --region=us-west-2
        
        - run: 
            name: get services
            command: |
              kubectl get service cap-1cada17 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
              export IP=$(kubectl get service cap-1cada17 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              echo $IP
        - run: 
            name: setup cloudfront distribution
            command: |
              aws cloudfront create-distribution --origin-domain-name "$(kubectl get service <service_name> -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" --default-root-object index.html --enabled --comment "CloudFront distribution for ELB"



workflows:
  default:
    jobs:
#      - deploy-infrastructure
#      - configure-infrastructure
      - configure-cloudfront
#          requires: [deploy-infrastructure]

      